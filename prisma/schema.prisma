// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Configures the Prisma client to generate a JavaScript client.
generator client {
  provider = "prisma-client-js"
}

// Configures the database connection using MongoDB.
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model for storing user data in MongoDB.
model User {
  // Unique identifier, auto-generated.
  id             String    @id @default(auto()) @map("_id") @db.ObjectId 
  name           String?
  // Unique email address.
  email          String?   @unique 
  // Email verification date and time.
  emailVerified  DateTime? 
  // User's profile image URL.
  image          String?   
  // Hashed password.
  hashedPassword String?   
  // Creation timestamp.
  createdAt      DateTime  @default(now()) 
  // Update timestamp.
  updatedAt      DateTime  @updatedAt 

  // Relation to conversations.
  conversationIds String[]       @db.ObjectId 
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id]) 

  // Relation to seen messages.
  seenMessageIds String[]  @db.ObjectId 
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id]) 

  accounts Account[] 
  messages Message[] 
}

// Account model for user account information.
model Account {
  // Unique identifier, auto-generated.
  id                String @id @default(auto()) @map("_id") @db.ObjectId 
  // User ID this account belongs to.
  userId            String @db.ObjectId 
  // Account type (e.g., OAuth, local).
  type              String 
  // Service provider (e.g., Google, Facebook).
  provider          String 
  // Provider's account ID.
  providerAccountId String 

  // Optional OAuth fields.
  refresh_token String? @db.String 
  access_token  String? @db.String 
  expires_at    Int?    
  token_type    String? 
  scope         String? 
  id_token      String? @db.String 
  session_state String? 

  // Relation to the User model, with cascade delete.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 

  // Ensures unique combination of provider and providerAccountId.
  @@unique([provider, providerAccountId]) 
}

// Conversation model for storing conversation data.
model Conversation {
  // Unique identifier, auto-generated.
  id            String   @id @default(auto()) @map("_id") @db.ObjectId 
  // Creation timestamp.
  createdAt     DateTime @default(now()) 
  // Timestamp of the last message.
  lastMessageAt DateTime @default(now()) 
  // Optional conversation name.
  name          String?  
  // Indicates if the conversation is a group chat.
  isGroup       Boolean? 

  // Relation to messages.
  messagesIds String[]  @db.ObjectId 
  messages    Message[] 

  // Relation to users.
  userIds String[] @db.ObjectId 
  users   User[]   @relation(fields: [userIds], references: [id]) 
}

// Message model for storing message data.
model Message {
  // Unique identifier, auto-generated.
  id        String   @id @default(auto()) @map("_id") @db.ObjectId 
  // Message text.
  body      String?  
  // Image URL.
  image     String?  
  // Creation timestamp.
  createdAt DateTime @default(now()) 

  // Relation to users who have seen the message.
  seenIds String[] @db.ObjectId 
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id]) 

  // Relation to the conversation the message belongs to.
  conversationId String       @db.ObjectId 
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade) 

  // Relation to the user who sent the message.
  senderId String @db.ObjectId 
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade) 
}
